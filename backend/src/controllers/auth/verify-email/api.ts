import crypto from "crypto";
import bcrypt from "bcryptjs";
import Redis from "../../../lib/redis";

import { Request, Response } from "express";
import { prisma } from "../../../lib/prisma";
import { signAccess } from "../../../lib/jwt";
import { sendEmail } from "../../../lib/sendEmail";
import { hashPassword } from "../../../lib/crypto";
import { composeEmailTemplate } from "../../../lib/emailTemp";

export const sendVerificationEmail = async (req: Request, res: Response) => {
  try {
    const { email, role, name, password } = req.body;
    if (!email || !role)
      return res.status(400).json({ message: "Email and role are required" });

    if (role==='ADMIN' && (!password || !name)) 
      return res.status(403).json({ message: "Data incomplete or invalid" });

    const token = crypto.randomBytes(32).toString("hex");

    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser && role ==="ADMIN") {
      return res.status(419).json({ message: "Email cannot be created!"});
    }
    if (existingUser && role === "USER") {
      return res.status(409).json({ message: "Email already registered"})
    }

    await Redis.setEx(
      `verify-email:${token}`,
      900,
      JSON.stringify({ email, role, name, password })
    );

    const link = `${process.env.FRONTEND_URL}/verify?token=${token}`;

    await sendEmail({
      to: email,
      subject: "Verify your TicTask email",
      html: composeEmailTemplate({
        subject: "Verify your TicTask email",
        body1: `
          <p>Hi${name ? ` ${name}` : ''},</p>
          <p>Thank you for signing up for TicTask. Please click the button below to verify your email address and get started:</p>
          <a href="${link}" class="button">&nbsp; Verify Email &nbsp;</a>
          <p>This link expires in 15 minutes.</p>
        `,
        body2: `<p>If you did not sign up for a TicTask account, you can safely ignore this email.</p>`,
        closingRemark: `<p>Let's go! ðŸ”¥<br/>The TicTask Team</p>`
      }), 
    });

    return res.status(200).json({ message: "Verification email sent" });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ message: "Server error" });
  }
};

export const confirmEmailVerification = async (req: Request, res: Response) => {
  try {
    const { token } = req.body;
    if (!token) {
      return res.status(400).json({ message: "Verification token missing" });
    }

    const cached = await Redis.get(`verify-email:${token}`);
    if (!cached) {
      return res.status(400).json({ message: "Invalid or expired link" });
    }

    const data = JSON.parse(cached);
    const { email, role, name, password } = data;
    console.log(email)

    // ADMIN
    // set up admin account
    if (role === "ADMIN") {
      console.warn("High-level superuser activity registered!");
      const passwordHash = await bcrypt.hash(password, 10);

      await prisma.user.upsert({
        where: { email },
        update: { isVerified: true },
        create: {
          email,
          name,
          password: passwordHash,
          role: "ADMIN",
          isVerified: true,
        },
      });
      await Redis.del(`verify-email:${token}`);

      await sendEmail({
        to: email,
        subject: "TicTask Admin Account Verified",
        html: composeEmailTemplate({
          subject: "TicTask Admin Account Verified",
          title: "Your Admin Account is Ready",
          body1: `
            <p>Hi ${name},</p>
            <p>Your admin account has been successfully created and verified.</p>
            <p>You can now log in to your account:</p>
            <a href="${process.env.FRONTEND_URL}/auth/login/admin" class="button">
              Go to Admin Login â†’
            </a>
          `,
          body2: `<p>If this wasnâ€™t you, contact support immediately.</p>`
        }),
      });

      return res.status(200).json({
        message: "Admin email verified and account created",
        redirect: "/auth/login/admin",
        role: "ADMIN",
        email,
      });
    }

    // User
    // if existing, redirect to onboarding
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      console.warn("This User record exists in DB");
      const payload = { sub: existingUser.id, role: existingUser.role };
      const accessToken = signAccess(payload);

      return res.status(409).json({
        message: "Email already registered",
        redirect: `/onboarding?role=${existingUser.role}&token=${(accessToken)}`,
        email,
        token: accessToken,
        role: existingUser.role,
      });
    }

    // User
    // if new, create record and send to onboarding
    if (role === "USER") {
      console.log("Creating new USER record in DB with autogenerated password");
      const tempPassword = crypto.randomBytes(8).toString("hex");
      const passwordHash = await hashPassword(tempPassword);

      const user = await prisma.user.upsert({
        where: { email },
        update: { isVerified: true },
        create: {
          email,
          name: name || "",
          role: "USER",
          isVerified: true,
          password: passwordHash,
        },
      });

      await Redis.del(`verify:${token}`);

      const payload = { sub: user.id, role: user.role };
      const accessToken = signAccess(payload);
      const link = `${process.env.FRONTEND_URL}/onboarding?token=${accessToken}`

      await sendEmail({
        to: email,
        subject: "Welcome to TicTask - Set Your Password",
        html: composeEmailTemplate({
          subject: "Welcome to TicTask - Set Your Password",
          title: "Email Verified!",
          subtitle: "Set your password to continue onboarding",
          body1: `
            <p>Hi ${name || ""},</p>
            <p>Your email has been verified successfully.</p>
            <p>Click below to set your password:</p>
            <a class="button" href="${link}">
              Set Password â†’
            </a>
          `,
          body2: `<p>If this wasnâ€™t you, please contact our support team immediately.</p>`,
        }),
      });

      return res.status(200).json({
        message: "User verified, proceed to onboarding",
        redirect: `/onboarding?email=${encodeURI(email)}&token=${encodeURIComponent(accessToken)}`,
        role: "USER",
        email,
        token: accessToken,
      });
    }
    return res.status(400).json({ message: "Invalid role" });
  } catch (err) {
    console.error("confirmEmailVerification error:", err);
    return res.status(500).json({ message: "Server error" });
  }
};

export const resendVerificationEmail = async (req: Request, res: Response) => {
  try {
    const { email, role } = req.body;
    if (!email || !role) {
      return res.status(400).json({ message: "Email and role are required" });
    }

    const existing = await Redis.keys(`verify:*`);
    const tokenKey = existing.find(async (key) => {
      const cached = await Redis.get(key);
      if (!cached) return false;
      const parsed = JSON.parse(cached);

      return parsed.email === email && parsed.role === role;
    });

    if (tokenKey) {
      const ttl = await Redis.ttl(tokenKey);
      if (ttl && ttl > 0) {
        return res.status(429).json({ message: `Please wait ${ttl} seconds before requesting a new verification email` });
      }
    }
    
    const token = crypto.randomBytes(32).toString("hex");
    await Redis.setEx(`verify:${token}`, 900, JSON.stringify({ email, role }));

    const link = `${process.env.FRONTEND_URL}/verify?token=${token}`;

    await sendEmail({
      to: email,
      subject: "Resend: Verify your TicTask email",
      html: composeEmailTemplate({
        subject: "Resend: Verify your TicTask email",
        title: "Verify your TicTask email",
        body1: `
          <p>Hello,</p>
          <p>You requested to resend the verification email. Please click the button below to verify your email address and get started:</p>
          <a href="${link}">Verify Email</a>
          <p>This link expires in 15 minutes.</p>
        `,
        body2: `<p>If you did not request this email, you can safely ignore it.</p>`,
        closingRemark: `<p>All the best!<br/>The TicTask Team</p>`
      }),
    });

    return res.status(200).json({ message: "Verification email resent successfully" });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "Server error" });
  }
};
